/**
 * Gradle build script for CSIRO CASDA SODALint library.
 * Built for Gradle v2.7
 * 
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'maven-publish'

group = 'au.csiro.casda'

description = """SODA Validation Library"""

ext {
    majorVersion = 1
    minorVersion = 0
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenLocal()
	maven { url 'http://jenkins-cdc.it.csiro.au:8085/nexus/content/repositories/thirdparty' }
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    //compile 'org.slf4j:slf4j-api:1.7.12'
	compile("uk.ac.starlink:stilts:3.0.6")
    compile('org.apache.httpcomponents:httpclient:4.5.2') 
    compile('org.apache.httpcomponents:fluent-hc:4.5.2') 
     // For things like RandomStringUtils, StringUtils
    compile("org.apache.commons:commons-lang3:3.4")
    //compile("org.apache.ws.commons:ws-commons-util:1.0.1")

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
    // For things like FilenameUtils
    testCompile('commons-io:commons-io:2.4')
}


apply from: 'gradle/versioning.gradle'

jar {
    manifest {
        attributes 'Implementation-Title': 'SODALint', 'Implementation-Version': project.version, 
            'Built-On': buildTimestamp,
        	'Main-Class': 'au.csiro.casda.sodalint.SodaLinter' 
    }
}

//create a single Jar with all dependencies
task allJar(type: Jar) {
	manifest {
        attributes 'Implementation-Title': 'SODALint',  
        	'Implementation-Version': version, 
            'Built-On': buildTimestamp,
        	'Main-Class': 'au.csiro.casda.sodalint.SodaLinter'
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}


task sourceJar(type: Jar) {
    from sourceSets.main.java
    classifier "sources"
    manifest {
        attributes 'Implementation-Title': 'SODALint', 'Implementation-Version': project.version, 
            'Built-On': buildTimestamp 
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
    manifest {
        attributes 'Implementation-Title': 'SODALint', 'Implementation-Version': project.version, 
            'Built-On': buildTimestamp 
    }
}

//=====================================================================================================================
//
// Include other build files
//
//=====================================================================================================================

// Produces pmd, findbugs and checkstyle reports.
apply from: 'gradle/report.gradle'

// Produces jacoco code coverage report.
apply from: 'gradle/coverage-report.gradle'

// We conditionally apply the publish script so that we don't need the properties for all builds.
if (gradle.startParameter.taskNames.any{it =~ /publish/}) {
    apply from: 'gradle/publish.gradle'
    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId 'sodalint'
                from components.java
                artifact(sourceJar) {
                    classifier "sources"
                }
                artifact(javadocJar) {
                    classifier "javadoc"
                }
            }
        }
    }
    
}
